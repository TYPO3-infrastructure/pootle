#!/usr/bin/env bash

. /etc/profile.d/pootle.sh
. /home/pootle/scripts/etc/functions

set -o errtrace
set -o nounset

#  Trap non-normal exit signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM, ERR
trap onexit 1 2 3 15

#--- onexit() -----------------------------------------------------
#  @param $1 integer  (optional) Exit status.  If not set, use `$?'
function onexit() {
	local exit_status=${1:-$?}
	if [ $exit_status -gt 0 ]; then
		echo Exiting $0 with $exit_status
	fi
	exit $exit_status
}

function update_against_templates {
	local PROJECT=$1
	local FILE=$2

	pushd ${POOTLE_PO}/$PROJECT >/dev/null

	LANGUAGES=$(ls | grep -v templates)
	for L in $LANGUAGES; do
		if [ ! -f templates/$FILE ]; then
			echo "OOPS! Something went wrong, cannot find ${POOTLE_PO}/$PROJECT/templates/$FILE" >&2
			exit -1
		fi
		mkdir -p $(dirname $L/$FILE)
		pot2po --template $L/$FILE --input templates/$FILE --output $L/$FILE.new
		mv $L/$FILE.new $L/$FILE
	done

	popd >/dev/null
}

if [ $# -lt 1 ]; then
	echo "Usage: $0 <extension-key>" >&2
	exit 1
fi

EXTENSION=$(echo $1 | tr '[:upper:]' '[:lower:]')
PROJECT_NAME="TYPO3.ext.${EXTENSION}"
PROJECT_DIRECTORY="${POOTLE_PO}/${PROJECT_NAME}"

#
# Check if the project exist
if [ ! -d ${PROJECT_DIRECTORY} ]; then
	echo
	echo "[ERROR]   Project ${PROJECT_NAME} doesn't exist in Pootle, please create it before using this script"
	echo "[ERROR]   Please create directory: ${PROJECT_DIRECTORY}"
	onexit 1
fi

#
# Check if the templates directory exist
TEMPLATE_DIRECTORY="${PROJECT_DIRECTORY}/templates"
if [ ! -d $TEMPLATE_DIRECTORY ]; then
	echo
	echo "[INFO]    Templates directory for project ${PROJECT_NAME} doesn't exist in Pootle"
	echo "[NOTICE]  Create the templates directory"
	mkdir -p $TEMPLATE_DIRECTORY
fi

if [ ! -d $LOCAL_GIT_CLONE_DIRECTORY/$PROJECT_NAME ]; then
	echo "[ERROR]	No project sources found in ${LOCAL_GIT_CLONE_DIRECTORY}/${PROJECT_NAME}"
	onexit 1
fi

pushd $LOCAL_GIT_CLONE_DIRECTORY/$PROJECT_NAME >/dev/null

git checkout .
git pull

echo -n "Synchronizing stores ... "
pootle sync_stores --force --overwrite --project=$PROJECT_NAME >/dev/null 2>&1
echo "done."

rm -rf $PROJECT_DIRECTORY/templates/*
for XLF in $(find . -name \*.xlf | egrep -v '/..\.' | cut -b3-); do
	DIR=$(dirname $XLF)
	mkdir -p $PROJECT_DIRECTORY/templates/$DIR
	cp $XLF $PROJECT_DIRECTORY/templates/$DIR/
	update_against_templates $PROJECT_NAME $XLF
done

popd >/dev/null

pootle update_stores --project=$PROJECT_NAME

onexit
